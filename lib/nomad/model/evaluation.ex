# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Nomad.Model.Evaluation do
  @moduledoc """
  
  """

  @derive [Poison.Encoder]
  defstruct [
    :"AnnotatePlan",
    :"BlockedEval",
    :"ClassEligibility",
    :"CreateIndex",
    :"CreateTime",
    :"DeploymentID",
    :"EscapedComputedClass",
    :"FailedTGAllocs",
    :"ID",
    :"JobID",
    :"JobModifyIndex",
    :"ModifyIndex",
    :"ModifyTime",
    :"Namespace",
    :"NextEval",
    :"NodeID",
    :"NodeModifyIndex",
    :"PreviousEval",
    :"Priority",
    :"QueuedAllocations",
    :"QuotaLimitReached",
    :"SnapshotIndex",
    :"Status",
    :"StatusDescription",
    :"TriggeredBy",
    :"Type",
    :"Wait",
    :"WaitUntil"
  ]

  @type t :: %__MODULE__{
    :"AnnotatePlan" => boolean() | nil,
    :"BlockedEval" => String.t | nil,
    :"ClassEligibility" => %{optional(String.t) => boolean()} | nil,
    :"CreateIndex" => integer() | nil,
    :"CreateTime" => integer() | nil,
    :"DeploymentID" => String.t | nil,
    :"EscapedComputedClass" => boolean() | nil,
    :"FailedTGAllocs" => %{optional(String.t) => Nomad.Model.AllocationMetric.t} | nil,
    :"ID" => String.t | nil,
    :"JobID" => String.t | nil,
    :"JobModifyIndex" => integer() | nil,
    :"ModifyIndex" => integer() | nil,
    :"ModifyTime" => integer() | nil,
    :"Namespace" => String.t | nil,
    :"NextEval" => String.t | nil,
    :"NodeID" => String.t | nil,
    :"NodeModifyIndex" => integer() | nil,
    :"PreviousEval" => String.t | nil,
    :"Priority" => integer() | nil,
    :"QueuedAllocations" => %{optional(String.t) => integer()} | nil,
    :"QuotaLimitReached" => String.t | nil,
    :"SnapshotIndex" => integer() | nil,
    :"Status" => String.t | nil,
    :"StatusDescription" => String.t | nil,
    :"TriggeredBy" => String.t | nil,
    :"Type" => String.t | nil,
    :"Wait" => integer() | nil,
    :"WaitUntil" => DateTime.t | nil
  }
end

defimpl Poison.Decoder, for: Nomad.Model.Evaluation do
  import Nomad.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"FailedTGAllocs", :map, Nomad.Model.AllocationMetric, options)
  end
end

