# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Nomad.Model.Job do
  @moduledoc """
  
  """

  @derive [Poison.Encoder]
  defstruct [
    :Affinities,
    :AllAtOnce,
    :Constraints,
    :ConsulNamespace,
    :ConsulToken,
    :CreateIndex,
    :Datacenters,
    :DispatchIdempotencyToken,
    :Dispatched,
    :ID,
    :JobModifyIndex,
    :Meta,
    :Migrate,
    :ModifyIndex,
    :Multiregion,
    :Name,
    :Namespace,
    :NomadTokenID,
    :ParameterizedJob,
    :ParentID,
    :Payload,
    :Periodic,
    :Priority,
    :Region,
    :Reschedule,
    :Spreads,
    :Stable,
    :Status,
    :StatusDescription,
    :Stop,
    :SubmitTime,
    :TaskGroups,
    :Type,
    :Update,
    :VaultNamespace,
    :VaultToken,
    :Version
  ]

  @type t :: %__MODULE__{
    :Affinities => [Nomad.Model.Affinity.t] | nil,
    :AllAtOnce => boolean() | nil,
    :Constraints => [Nomad.Model.Constraint.t] | nil,
    :ConsulNamespace => String.t | nil,
    :ConsulToken => String.t | nil,
    :CreateIndex => integer() | nil,
    :Datacenters => [String.t] | nil,
    :DispatchIdempotencyToken => String.t | nil,
    :Dispatched => boolean() | nil,
    :ID => String.t | nil,
    :JobModifyIndex => integer() | nil,
    :Meta => %{optional(String.t) => String.t} | nil,
    :Migrate => Nomad.Model.MigrateStrategy.t | nil,
    :ModifyIndex => integer() | nil,
    :Multiregion => Nomad.Model.Multiregion.t | nil,
    :Name => String.t | nil,
    :Namespace => String.t | nil,
    :NomadTokenID => String.t | nil,
    :ParameterizedJob => Nomad.Model.ParameterizedJobConfig.t | nil,
    :ParentID => String.t | nil,
    :Payload => binary() | nil,
    :Periodic => Nomad.Model.PeriodicConfig.t | nil,
    :Priority => integer() | nil,
    :Region => String.t | nil,
    :Reschedule => Nomad.Model.ReschedulePolicy.t | nil,
    :Spreads => [Nomad.Model.Spread.t] | nil,
    :Stable => boolean() | nil,
    :Status => String.t | nil,
    :StatusDescription => String.t | nil,
    :Stop => boolean() | nil,
    :SubmitTime => integer() | nil,
    :TaskGroups => [Nomad.Model.TaskGroup.t] | nil,
    :Type => String.t | nil,
    :Update => Nomad.Model.UpdateStrategy.t | nil,
    :VaultNamespace => String.t | nil,
    :VaultToken => String.t | nil,
    :Version => integer() | nil
  }
end

defimpl Poison.Decoder, for: Nomad.Model.Job do
  import Nomad.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:Affinities, :list, Nomad.Model.Affinity, options)
    |> deserialize(:Constraints, :list, Nomad.Model.Constraint, options)
    |> deserialize(:Migrate, :struct, Nomad.Model.MigrateStrategy, options)
    |> deserialize(:Multiregion, :struct, Nomad.Model.Multiregion, options)
    |> deserialize(:ParameterizedJob, :struct, Nomad.Model.ParameterizedJobConfig, options)
    |> deserialize(:Periodic, :struct, Nomad.Model.PeriodicConfig, options)
    |> deserialize(:Reschedule, :struct, Nomad.Model.ReschedulePolicy, options)
    |> deserialize(:Spreads, :list, Nomad.Model.Spread, options)
    |> deserialize(:TaskGroups, :list, Nomad.Model.TaskGroup, options)
    |> deserialize(:Update, :struct, Nomad.Model.UpdateStrategy, options)
  end
end

