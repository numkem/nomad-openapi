# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Nomad.Api.Allocations do
  @moduledoc """
  API calls for all endpoints tagged `Allocations`.
  """

  alias Nomad.Connection
  import Nomad.RequestBuilder


  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :index (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - :wait (String.t): Provided with IndexParam to wait for change.
    - :stale (String.t): If present, results will include stale reads.
    - :prefix (String.t): Constrains results to jobs that start with the defined prefix
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :per_page (integer()): Maximum number of results to return.
    - :next_token (String.t): Indicates where to start paging for queries that support pagination.
    - :resources (boolean()): Flag indicating whether to include resources in response.
    - :task_states (boolean()): Flag indicating whether to include task states in response.
  ## Returns

  {:ok, [%AllocationListStub{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_allocations(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, list(Nomad.Model.AllocationListStub.t)} | {:error, Tesla.Env.t}
  def get_allocations(connection, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query,
      :resources => :query,
      :task_states => :query
    }
    %{}
    |> method(:get)
    |> url("/allocations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Nomad.Model.AllocationListStub{}]},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end
end
