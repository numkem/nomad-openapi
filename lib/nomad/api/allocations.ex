# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Nomad.Api.Allocations do
  @moduledoc """
  API calls for all endpoints tagged `Allocations`.
  """

  alias Nomad.Connection
  import Nomad.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (Nomad.Connection): Connection to server
  - `alloc_id` (String.t): Allocation ID.
  - `opts` (keyword): Optional parameters
    - `:region` (String.t): Filters results based on the specified region.
    - `:namespace` (String.t): Filters results based on the specified namespace.
    - `:index` (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - `:wait` (String.t): Provided with IndexParam to wait for change.
    - `:stale` (String.t): If present, results will include stale reads.
    - `:prefix` (String.t): Constrains results to jobs that start with the defined prefix
    - `:"X-Nomad-Token"` (String.t): A Nomad ACL token.
    - `:per_page` (integer()): Maximum number of results to return.
    - `:next_token` (String.t): Indicates where to start paging for queries that support pagination.

  ### Returns

  - `{:ok, Nomad.Model.Allocation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_allocation(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Nomad.Model.Allocation.t} | {:error, Tesla.Env.t}
  def get_allocation(connection, alloc_id, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/allocation/#{alloc_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Nomad.Model.Allocation{}},
      {400, false},
      {403, false},
      {405, false},
      {500, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (Nomad.Connection): Connection to server
  - `alloc_id` (String.t): Allocation ID.
  - `opts` (keyword): Optional parameters
    - `:region` (String.t): Filters results based on the specified region.
    - `:namespace` (String.t): Filters results based on the specified namespace.
    - `:index` (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - `:wait` (String.t): Provided with IndexParam to wait for change.
    - `:stale` (String.t): If present, results will include stale reads.
    - `:prefix` (String.t): Constrains results to jobs that start with the defined prefix
    - `:"X-Nomad-Token"` (String.t): A Nomad ACL token.
    - `:per_page` (integer()): Maximum number of results to return.
    - `:next_token` (String.t): Indicates where to start paging for queries that support pagination.

  ### Returns

  - `{:ok, [%ServiceRegistration{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_allocation_services(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(Nomad.Model.ServiceRegistration.t)} | {:error, Tesla.Env.t}
  def get_allocation_services(connection, alloc_id, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/allocation/#{alloc_id}/services")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Nomad.Model.ServiceRegistration{}]},
      {400, false},
      {403, false},
      {405, false},
      {500, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (Nomad.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:region` (String.t): Filters results based on the specified region.
    - `:namespace` (String.t): Filters results based on the specified namespace.
    - `:index` (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - `:wait` (String.t): Provided with IndexParam to wait for change.
    - `:stale` (String.t): If present, results will include stale reads.
    - `:prefix` (String.t): Constrains results to jobs that start with the defined prefix
    - `:"X-Nomad-Token"` (String.t): A Nomad ACL token.
    - `:per_page` (integer()): Maximum number of results to return.
    - `:next_token` (String.t): Indicates where to start paging for queries that support pagination.
    - `:resources` (boolean()): Flag indicating whether to include resources in response.
    - `:task_states` (boolean()): Flag indicating whether to include task states in response.

  ### Returns

  - `{:ok, [%AllocationListStub{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_allocations(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, list(Nomad.Model.AllocationListStub.t)} | {:error, Tesla.Env.t}
  def get_allocations(connection, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query,
      :resources => :query,
      :task_states => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/allocations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%Nomad.Model.AllocationListStub{}]},
      {400, false},
      {403, false},
      {405, false},
      {500, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (Nomad.Connection): Connection to server
  - `alloc_id` (String.t): Allocation ID.
  - `opts` (keyword): Optional parameters
    - `:region` (String.t): Filters results based on the specified region.
    - `:namespace` (String.t): Filters results based on the specified namespace.
    - `:index` (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - `:wait` (String.t): Provided with IndexParam to wait for change.
    - `:stale` (String.t): If present, results will include stale reads.
    - `:prefix` (String.t): Constrains results to jobs that start with the defined prefix
    - `:"X-Nomad-Token"` (String.t): A Nomad ACL token.
    - `:per_page` (integer()): Maximum number of results to return.
    - `:next_token` (String.t): Indicates where to start paging for queries that support pagination.
    - `:no_shutdown_delay` (boolean()): Flag indicating whether to delay shutdown when requesting an allocation stop.

  ### Returns

  - `{:ok, Nomad.Model.AllocStopResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_allocation_stop(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Nomad.Model.AllocStopResponse.t} | {:error, Tesla.Env.t}
  def post_allocation_stop(connection, alloc_id, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query,
      :no_shutdown_delay => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/allocation/#{alloc_id}/stop")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %Nomad.Model.AllocStopResponse{}},
      {400, false},
      {403, false},
      {405, false},
      {500, false}
    ])
  end
end
