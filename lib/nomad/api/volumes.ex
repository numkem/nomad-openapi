# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Nomad.Api.Volumes do
  @moduledoc """
  API calls for all endpoints tagged `Volumes`.
  """

  alias Nomad.Connection
  import Nomad.RequestBuilder


  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - volume_id (String.t): Volume unique identifier.
  - action (String.t): The action to perform on the Volume (create, detach, delete).
  - csi_volume_create_request (CsiVolumeCreateRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_volume(Tesla.Env.client, String.t, String.t, Nomad.Model.CsiVolumeCreateRequest.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_volume(connection, volume_id, action, csi_volume_create_request, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query
    }
    %{}
    |> method(:post)
    |> url("/volume/csi/#{volume_id}/#{action}")
    |> add_param(:body, :body, csi_volume_create_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
    - :plugin_id (String.t): Filters volume lists by plugin ID.
    - :snapshot_id (String.t): The ID of the snapshot to target.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_snapshot(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_snapshot(connection, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query,
      :plugin_id => :query,
      :snapshot_id => :query
    }
    %{}
    |> method(:delete)
    |> url("/volumes/snapshot")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - volume_id (String.t): Volume unique identifier.
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
    - :force (String.t): Used to force the de-registration of a volume.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_volume_registration(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_volume_registration(connection, volume_id, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query,
      :force => :query
    }
    %{}
    |> method(:delete)
    |> url("/volume/csi/#{volume_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - volume_id (String.t): Volume unique identifier.
  - action (String.t): The action to perform on the Volume (create, detach, delete).
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
    - :node (String.t): Specifies node to target volume operation for.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec detach_or_delete_volume(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def detach_or_delete_volume(connection, volume_id, action, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query,
      :node => :query
    }
    %{}
    |> method(:delete)
    |> url("/volume/csi/#{volume_id}/#{action}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :index (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - :wait (String.t): Provided with IndexParam to wait for change.
    - :stale (String.t): If present, results will include stale reads.
    - :prefix (String.t): Constrains results to jobs that start with the defined prefix
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :per_page (integer()): Maximum number of results to return.
    - :next_token (String.t): Indicates where to start paging for queries that support pagination.
    - :plugin_id (String.t): Filters volume lists by plugin ID.
  ## Returns

  {:ok, Nomad.Model.CsiVolumeListExternalResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_external_volumes(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, Nomad.Model.CsiVolumeListExternalResponse.t} | {:error, Tesla.Env.t}
  def get_external_volumes(connection, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query,
      :plugin_id => :query
    }
    %{}
    |> method(:get)
    |> url("/volumes/external")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Nomad.Model.CsiVolumeListExternalResponse{}},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :index (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - :wait (String.t): Provided with IndexParam to wait for change.
    - :stale (String.t): If present, results will include stale reads.
    - :prefix (String.t): Constrains results to jobs that start with the defined prefix
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :per_page (integer()): Maximum number of results to return.
    - :next_token (String.t): Indicates where to start paging for queries that support pagination.
    - :plugin_id (String.t): Filters volume lists by plugin ID.
  ## Returns

  {:ok, Nomad.Model.CsiSnapshotListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_snapshots(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, Nomad.Model.CsiSnapshotListResponse.t} | {:error, Tesla.Env.t}
  def get_snapshots(connection, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query,
      :plugin_id => :query
    }
    %{}
    |> method(:get)
    |> url("/volumes/snapshot")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Nomad.Model.CsiSnapshotListResponse{}},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - volume_id (String.t): Volume unique identifier.
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :index (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - :wait (String.t): Provided with IndexParam to wait for change.
    - :stale (String.t): If present, results will include stale reads.
    - :prefix (String.t): Constrains results to jobs that start with the defined prefix
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :per_page (integer()): Maximum number of results to return.
    - :next_token (String.t): Indicates where to start paging for queries that support pagination.
  ## Returns

  {:ok, Nomad.Model.CsiVolume.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_volume(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Nomad.Model.CsiVolume.t} | {:error, Tesla.Env.t}
  def get_volume(connection, volume_id, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query
    }
    %{}
    |> method(:get)
    |> url("/volume/csi/#{volume_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Nomad.Model.CsiVolume{}},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :index (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - :wait (String.t): Provided with IndexParam to wait for change.
    - :stale (String.t): If present, results will include stale reads.
    - :prefix (String.t): Constrains results to jobs that start with the defined prefix
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :per_page (integer()): Maximum number of results to return.
    - :next_token (String.t): Indicates where to start paging for queries that support pagination.
    - :node_id (String.t): Filters volume lists by node ID.
    - :plugin_id (String.t): Filters volume lists by plugin ID.
    - :type (String.t): Filters volume lists to a specific type.
  ## Returns

  {:ok, [%CsiVolumeListStub{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_volumes(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, list(Nomad.Model.CsiVolumeListStub.t)} | {:error, Tesla.Env.t}
  def get_volumes(connection, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query,
      :node_id => :query,
      :plugin_id => :query,
      :type => :query
    }
    %{}
    |> method(:get)
    |> url("/volumes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Nomad.Model.CsiVolumeListStub{}]},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - csi_snapshot_create_request (CsiSnapshotCreateRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
  ## Returns

  {:ok, Nomad.Model.CsiSnapshotCreateResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_snapshot(Tesla.Env.client, Nomad.Model.CsiSnapshotCreateRequest.t, keyword()) :: {:ok, nil} | {:ok, Nomad.Model.CsiSnapshotCreateResponse.t} | {:error, Tesla.Env.t}
  def post_snapshot(connection, csi_snapshot_create_request, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query
    }
    %{}
    |> method(:post)
    |> url("/volumes/snapshot")
    |> add_param(:body, :body, csi_snapshot_create_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Nomad.Model.CsiSnapshotCreateResponse{}},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - csi_volume_register_request (CsiVolumeRegisterRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_volume(Tesla.Env.client, Nomad.Model.CsiVolumeRegisterRequest.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_volume(connection, csi_volume_register_request, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query
    }
    %{}
    |> method(:post)
    |> url("/volumes")
    |> add_param(:body, :body, csi_volume_register_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - volume_id (String.t): Volume unique identifier.
  - csi_volume_register_request (CsiVolumeRegisterRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_volume_registration(Tesla.Env.client, String.t, Nomad.Model.CsiVolumeRegisterRequest.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_volume_registration(connection, volume_id, csi_volume_register_request, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query
    }
    %{}
    |> method(:post)
    |> url("/volume/csi/#{volume_id}")
    |> add_param(:body, :body, csi_volume_register_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end
end
