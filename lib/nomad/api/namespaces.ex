# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Nomad.Api.Namespaces do
  @moduledoc """
  API calls for all endpoints tagged `Namespaces`.
  """

  alias Nomad.Connection
  import Nomad.RequestBuilder


  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_namespace(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_namespace(connection, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query
    }
    %{}
    |> method(:post)
    |> url("/namespace")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - namespace_name (String.t): The namespace identifier.
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_namespace(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_namespace(connection, namespace_name, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query
    }
    %{}
    |> method(:delete)
    |> url("/namespace/#{namespace_name}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - namespace_name (String.t): The namespace identifier.
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :index (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - :wait (String.t): Provided with IndexParam to wait for change.
    - :stale (String.t): If present, results will include stale reads.
    - :prefix (String.t): Constrains results to jobs that start with the defined prefix
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :per_page (integer()): Maximum number of results to return.
    - :next_token (String.t): Indicates where to start paging for queries that support pagination.
  ## Returns

  {:ok, Nomad.Model.Namespace.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_namespace(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Nomad.Model.Namespace.t} | {:error, Tesla.Env.t}
  def get_namespace(connection, namespace_name, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query
    }
    %{}
    |> method(:get)
    |> url("/namespace/#{namespace_name}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Nomad.Model.Namespace{}},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :index (integer()): If set, wait until query exceeds given index. Must be provided with WaitParam.
    - :wait (String.t): Provided with IndexParam to wait for change.
    - :stale (String.t): If present, results will include stale reads.
    - :prefix (String.t): Constrains results to jobs that start with the defined prefix
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :per_page (integer()): Maximum number of results to return.
    - :next_token (String.t): Indicates where to start paging for queries that support pagination.
  ## Returns

  {:ok, [%Namespace{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_namespaces(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, list(Nomad.Model.Namespace.t)} | {:error, Tesla.Env.t}
  def get_namespaces(connection, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :index => :headers,
      :wait => :query,
      :stale => :query,
      :prefix => :query,
      :"X-Nomad-Token" => :headers,
      :per_page => :query,
      :next_token => :query
    }
    %{}
    |> method(:get)
    |> url("/namespaces")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Nomad.Model.Namespace{}]},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end

  @doc """

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - namespace_name (String.t): The namespace identifier.
  - namespace2 (Namespace): 
  - opts (KeywordList): [optional] Optional parameters
    - :region (String.t): Filters results based on the specified region.
    - :namespace (String.t): Filters results based on the specified namespace.
    - :x_nomad_token (String.t): A Nomad ACL token.
    - :idempotency_token (String.t): Can be used to ensure operations are only run once.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_namespace(Tesla.Env.client, String.t, Nomad.Model.Namespace.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_namespace(connection, namespace_name, namespace2, opts \\ []) do
    optional_params = %{
      :region => :query,
      :namespace => :query,
      :"X-Nomad-Token" => :headers,
      :idempotency_token => :query
    }
    %{}
    |> method(:post)
    |> url("/namespace/#{namespace_name}")
    |> add_param(:body, :body, namespace2)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 403, false},
      { 405, false},
      { 500, false}
    ])
  end
end
